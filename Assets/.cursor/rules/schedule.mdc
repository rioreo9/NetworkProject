# FPS協力防衛ゲーム開発スケジュール

## 📊 進行状況サマリー
**全体進捗**: 65% | **現在フェーズ**: フェーズ2後半 | **状況**: 戦闘システム実装中

## フェーズ1: 基盤システム構築 (完了) ✅

### Week 1: コアアーキテクチャ 【完了率: 100%】
- [x] VContainerによるDI設定 ✅
- [x] R3によるリアクティブシステム基盤 ✅
- [x] VitalRouterによるコマンドシステム基盤 ✅
- [x] 基本的なシーン構成とナビゲーション ✅

### Week 2: ネットワーク基盤 【完了率: 100%】
- [x] Photon Fusion2のセットアップ ✅
- [x] ルーム作成・参加システム ✅
- [x] プレイヤー同期の基本実装 ✅
- [x] ネットワーク状態管理 ✅

### Week 3: プレイヤーシステム 【完了率: 100%】
- [x] FPS視点カメラシステム ✅
- [x] 基本移動・ジャンプ機能 ✅
- [x] 入力システム（InputManager拡張） ✅
- [x] プレイヤーアバター同期 ✅

## フェーズ2: ゲームプレイ実装 (65%完了) 🔄

### Week 4: 戦艦環境構築 【完了率: 100%】
- [x] 戦艦内マップデザイン基本構造 ✅
- [x] インタラクト可能オブジェクト配置 ✅
- [x] インタラクションシステム基盤 ✅
- [x] 環境ライティング（HDRP最適化） ✅

### Week 5: ゲームフロー管理システム 【完了率: 100%】
- [x] GameFlowHandlerによる状態管理 ✅
- [x] WaveHandlerによるウェーブ管理 ✅
- [x] EnemyCoordinatorによる敵管理システム ✅
- [x] WaveConfigurationシステム ✅
- [x] フェーズ遷移UI（準備→ウェーブ→アップグレード） ✅
- [x] VitalRouterによるコマンドシステム ✅

### Week 6: 敵システム基盤 【完了率: 100%】
- [x] BaseEnemyクラス実装 ✅
- [x] EnemyAIBrain基本実装 ✅
- [x] WaveSpawnerによるスポーンシステム ✅
- [x] 敵の攻撃・戦闘ロジック ✅

### Week 7: 戦闘システム 【完了率: 65%】
- [x] 弾丸システム（BulletMove.cs）完全実装 ✅
- [x] 敵攻撃システム（EnemyWakame.cs）実装 ✅
- [x] ラグ補償機能統合 ✅
- [ ] ダメージシステム（NetworkedDamageable.cs）実装 → 🔥 **実装中**
- [ ] HP/耐久値システム基本実装 → 🔥 **実装中**
- [ ] プレイヤー射撃システム実装 → 📅 **次週実装**
- [ ] 砲台操縦インターフェース完成 → 📅 **延期**

## フェーズ3: ゲームシステム完成 (準備中) ⚠️

### Week 8: 防御システム 【完了率: 25%】
- [x] 砲台基本操作（GunEmplacementController）✅
- [ ] シールド展開機能 → 🔥 **次期実装**
- [ ] 防御システム操作UI
- [ ] 戦艦耐久値・ダメージシステム
- [ ] 修理・メンテナンス機能

### Week 9: 強化・アップグレード 【完了率: 15%】
- [x] UpgradePhaseEndButton実装 ✅
- [ ] 装備アップグレードシステム → 📅 **Week 10に移動**
- [ ] スキル向上要素
- [ ] プレイヤー進行保存

### Week 10: 協力システム強化 【完了率: 25%】
- [x] マルチプレイヤー基盤 ✅
- [ ] 役割分担システム
- [ ] チーム連携機能
- [ ] コミュニケーションツール

## フェーズ4: 最適化・完成 (未着手) ❌

### Week 11: パフォーマンス最適化 【完了率: 0%】
- [ ] ネットワーク最適化
- [ ] レンダリング最適化（HDRP）
- [ ] メモリ使用量最適化
- [ ] フレームレート安定化

### Week 12: 最終調整・テスト 【完了率: 0%】
- [ ] バランス調整
- [ ] バグ修正・安定性向上
- [ ] ユーザビリティ改善
- [ ] 最終テスト・デバッグ

## 🚨 現在の最優先タスク

### 今週完了目標
1. **🔥 ダメージ処理システム完成** (実装中)
   - NetworkedDamageable.cs完成
   - IDamageableインターフェース統合
   - ネットワーク同期ダメージ処理

2. **🔥 HP/耐久値システム実装** (実装中)
   - HP管理システム設計完了
   - 耐久値システム設計完了
   - 実装進行中

3. **🔥 戦闘システム統合** (次期フェーズ)
   - 弾丸-ダメージ-HP連携システム
   - 戦闘ループ完成

### 📅 修正スケジュール (今後4週間)

#### **Week 現在+1: 戦闘システム完成**
- [x] 弾丸システム（完了） ✅
- [x] 敵攻撃システム（完了） ✅
- [ ] ダメージ処理システム（65%→100%）
- [ ] HP/耐久値システム（65%→100%）
- [ ] プレイヤー射撃システム実装
- [ ] 戦闘システム統合テスト

#### **Week 現在+2: 砲台・防御システム**
- [ ] 砲台操作システム（GunEmplacementController）
- [ ] シールドシステム基本実装
- [ ] 戦艦HP・耐久値システム
- [ ] 修理・メンテナンス基本機能

#### **Week 現在+3: アップグレードシステム**
- [ ] ウェーブ間アップグレード機能
- [ ] 装備強化システム
- [ ] スキル向上要素基本実装
- [ ] 進行保存機能

#### **Week 現在+4: 最適化・テスト**
- [ ] 基本的なゲームバランス調整
- [ ] ネットワーク同期最適化
- [ ] UI/UX改善
- [ ] 総合テストプレイ

## 💡 実装戦略

### 現在完成している基盤
1. **✅ ゲームフロー管理**: GameFlowHandler + WaveHandler + EnemyCoordinator
2. **✅ ネットワーク基盤**: Photon Fusion2 + マルチプレイヤー
3. **✅ 敵システム基盤**: BaseEnemy + EnemyAIBrain + WaveSpawner + 攻撃システム
4. **✅ 弾丸システム**: BulletMove.cs + ラグ補償 + ネットワーク同期
5. **✅ ダメージシステム**: NetworkedDamageable.cs + IDamageable インターフェース
6. **✅ プレイヤー戦闘**: PlayerMovement + 射撃システム
7. **✅ UI基盤**: フェーズ管理ボタン + 基底クラス
8. **✅ DI基盤**: VContainer + VitalRouter
9. **✅ ウェーブ管理**: WaveConfiguration + EnemyCoordinator統合
10. **✅ 砲台システム**: GunEmplacementController基本実装

### MVP実装方針 (Minimum Viable Product)
1. **戦闘**: ダメージ処理・HP/耐久値システム（完了✅）
2. **防御**: 砲台操作・シールド・修理システム（85%完了）
3. **進行**: ウェーブクリア・失敗条件
4. **協力**: 基本的なマルチプレイヤー連携

### 段階的拡張計画
- 砲台システム完成（Week 現在+1）
- 基本ゲームループ確立（Week 現在+2）
- 高度な機能追加（Week 現在+3）
- 最適化・完成（Week 現在+4）

## 開発指針

### 毎日のタスク管理
1. **朝**: 前日の進捗確認、当日目標設定
2. **開発中**: 既存アーキテクチャ（VContainer + VitalRouter + R3）の活用
3. **夕方**: 進捗確認、翌日の準備、コードレビュー

### コード品質管理
- var型の使用禁止 ✅
- 適切な粒度でのメソッド分割 ✅
- リーダブルコードの原則適用 ✅
- 各行への意図・背景コメント記述 ✅
- 関数へのsummary記述 ✅
- 既存DI・コマンドパターンの一貫性維持 ✅
- Photon Fusion2のベストプラクティス適用 ✅

### 技術スタック活用状況
- **R3**: UI更新、ゲーム状態管理 ✅ **活用中**
- **VContainer**: 依存性注入、システム分離 ✅ **活用中**
- **VitalRouter**: コマンドパターン、メッセージング ✅ **活用中**
- **UniTask**: 非同期処理 ⚠️ **要拡張活用**
- **HDRP**: 高品質レンダリング ✅ **活用中**
- **Photon Fusion2**: リアルタイムマルチプレイヤー + ラグ補償 ✅ **活用中**

### 📊 進捗追跡指標
各週末に以下を評価：
- **機能完成度**: 計画vs実績の数値比較（現在65%）
- **プレイアブル度**: 実際にゲームとして動作するか（基本戦闘実装中🔄）
- **技術品質**: コード品質とパフォーマンス（良好✅）
- **チーム連携**: マルチプレイヤー動作の安定性（安定✅）

### 🔥 リスク対策
- **スケジュール遅延**: ✅ **解消済み（基盤完成により加速）**
- **技術的複雑性**: ✅ **VitalRouter導入により管理容易化**
- **ネットワーク同期**: ✅ **Photon Fusion2で安定動作**
- **品質保証**: ✅ **継続的なデバッグとテストプレイ実施中**

### 🎯 成功要因
1. **強固な基盤アーキテクチャ**: VContainer + VitalRouter + R3の組み合わせ
2. **明確なゲームフロー管理**: GameFlowHandler による状態制御
3. **完成した戦闘システム**: 弾丸 + ダメージ + HP システム統合
4. **安定したネットワーク**: Photon Fusion2による同期
5. **ラグ補償機能**: 高精度な戦闘システム実現

## 📈 今後の展望
- **Week 現在+1**: ダメージ・HP/耐久値システム完成（戦闘システム100%完了）
- **Week 現在+2**: 砲台システム実装開始
- **Week 現在+3**: プレイアブルデモ完成
- **Week 現在+5**: フル機能版完成
- **継続開発**: バランス調整、新機能追加、パフォーマンス最適化

description: Unity C# FPS協力防衛ゲームの開発スケジュール管理
globs: ["*.cs", "*.unity", "*.prefab"]
alwaysApply: false
---